[{"C:\\webdev\\cma4\\pages\\About\\index.tsx":"1","C:\\webdev\\cma4\\pages\\api\\Google.tsx":"2","C:\\webdev\\cma4\\pages\\index.tsx":"3","C:\\webdev\\cma4\\pages\\_app.tsx":"4","C:\\webdev\\cma4\\pages\\_document.tsx":"5","C:\\webdev\\cma4\\src\\components\\About\\Landing\\AboutLanding.tsx":"6","C:\\webdev\\cma4\\src\\components\\About\\Services\\ServiceCard\\ServiceCard.tsx":"7","C:\\webdev\\cma4\\src\\components\\About\\Services\\ServiceCard\\ServiceCardList.tsx":"8","C:\\webdev\\cma4\\src\\components\\About\\Services\\Services.tsx":"9","C:\\webdev\\cma4\\src\\components\\features\\Calendar\\CmaCalendar.tsx":"10","C:\\webdev\\cma4\\src\\components\\features\\Calendar\\EventCards\\EventCard.tsx":"11","C:\\webdev\\cma4\\src\\components\\features\\Calendar\\EventCards\\EventCardList.tsx":"12","C:\\webdev\\cma4\\src\\components\\features\\Carousel\\Carousel.tsx":"13","C:\\webdev\\cma4\\src\\components\\features\\Map\\Map.tsx":"14","C:\\webdev\\cma4\\src\\components\\Home\\Banner\\Banner.tsx":"15","C:\\webdev\\cma4\\src\\components\\Home\\Landing\\Desktop\\DesktopHomeLanding.tsx":"16","C:\\webdev\\cma4\\src\\components\\Home\\Landing\\HomeLanding.tsx":"17","C:\\webdev\\cma4\\src\\components\\Home\\Landing\\Mobile\\MobileHomeLanding.tsx":"18","C:\\webdev\\cma4\\src\\components\\navigation\\Footer\\Footer.tsx":"19","C:\\webdev\\cma4\\src\\components\\navigation\\Layout\\Layout.tsx":"20","C:\\webdev\\cma4\\src\\components\\navigation\\Navbar\\MobileNav\\MobileNav.tsx":"21","C:\\webdev\\cma4\\src\\components\\navigation\\Navbar\\NavigationBar.tsx":"22","C:\\webdev\\cma4\\src\\components\\features\\MailingList\\MailchimpContainer.tsx":"23","C:\\webdev\\cma4\\src\\components\\features\\MailingList\\MailingList.tsx":"24"},{"size":418,"mtime":1654127545197,"results":"25","hashOfConfig":"26"},{"size":815,"mtime":1651548185233,"results":"27","hashOfConfig":"26"},{"size":1492,"mtime":1650430587772,"results":"28","hashOfConfig":"26"},{"size":298,"mtime":1651450302426,"results":"29","hashOfConfig":"26"},{"size":550,"mtime":1654394002315,"results":"30","hashOfConfig":"26"},{"size":1774,"mtime":1651377467265,"results":"31","hashOfConfig":"26"},{"size":981,"mtime":1651542506477,"results":"32","hashOfConfig":"26"},{"size":2695,"mtime":1651377563602,"results":"33","hashOfConfig":"26"},{"size":694,"mtime":1651377348452,"results":"34","hashOfConfig":"26"},{"size":4217,"mtime":1654127547306,"results":"35","hashOfConfig":"26"},{"size":1816,"mtime":1652118229299,"results":"36","hashOfConfig":"26"},{"size":680,"mtime":1650327418923,"results":"37","hashOfConfig":"26"},{"size":2379,"mtime":1650248889936,"results":"38","hashOfConfig":"26"},{"size":1097,"mtime":1651547580238,"results":"39","hashOfConfig":"26"},{"size":1052,"mtime":1654398751753,"results":"40","hashOfConfig":"26"},{"size":1410,"mtime":1649642723268,"results":"41","hashOfConfig":"26"},{"size":349,"mtime":1649037007141,"results":"42","hashOfConfig":"26"},{"size":803,"mtime":1650150552783,"results":"43","hashOfConfig":"26"},{"size":4044,"mtime":1649639342025,"results":"44","hashOfConfig":"26"},{"size":441,"mtime":1646345461996,"results":"45","hashOfConfig":"26"},{"size":2147,"mtime":1650425753036,"results":"46","hashOfConfig":"26"},{"size":1313,"mtime":1651449859604,"results":"47","hashOfConfig":"26"},{"size":621,"mtime":1651549542523,"results":"48","hashOfConfig":"26"},{"size":4910,"mtime":1651554112758,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1b7if85",{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80"},{"filePath":"81","messages":"82","suppressedMessages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","suppressedMessages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","suppressedMessages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","suppressedMessages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","suppressedMessages":"95","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"96","messages":"97","suppressedMessages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","suppressedMessages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","suppressedMessages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","suppressedMessages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"108","messages":"109","suppressedMessages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"111","messages":"112","suppressedMessages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"114","messages":"115","suppressedMessages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"117","messages":"118","suppressedMessages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"120","messages":"121","suppressedMessages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\webdev\\cma4\\pages\\About\\index.tsx",[],[],"C:\\webdev\\cma4\\pages\\api\\Google.tsx",[],[],"C:\\webdev\\cma4\\pages\\index.tsx",[],[],"C:\\webdev\\cma4\\pages\\_app.tsx",[],[],"C:\\webdev\\cma4\\pages\\_document.tsx",[],[],"C:\\webdev\\cma4\\src\\components\\About\\Landing\\AboutLanding.tsx",[],[],"C:\\webdev\\cma4\\src\\components\\About\\Services\\ServiceCard\\ServiceCard.tsx",[],[],"C:\\webdev\\cma4\\src\\components\\About\\Services\\ServiceCard\\ServiceCardList.tsx",[],[],"C:\\webdev\\cma4\\src\\components\\About\\Services\\Services.tsx",[],[],"C:\\webdev\\cma4\\src\\components\\features\\Calendar\\CmaCalendar.tsx",["123"],[],"import * as React from \"react\";\r\nimport { useState, useEffect } from \"react\";\r\nimport * as dateFns from \"date-fns\";\r\nimport { CircularProgress } from \"@mui/material\";\r\nimport moment from \"moment\";\r\nimport { EventCardList } from \"./EventCards/EventCardList\";\r\n\r\nconst CALENDAR_ID = \"1s8osr31o7vbkh993j236pu128@group.calendar.google.com\";\r\nconst API_KEY = \"AIzaSyDIrLYRk8P6upEoBmoF6BG3PGKAi1pDdqo\";\r\nconst SCOPE = \"https://www.googleapis.com/auth/calendar.events.readonly\";\r\nconst url = `https://www.googleapis.com/calendar/v3/calendars/${CALENDAR_ID}/events?key=${API_KEY}`;\r\n\r\nclass calEvent {\r\n  constructor(start: Date, end: Date, summary: string, description: string) {}\r\n}\r\nconst dummydata: any[] = [];\r\n\r\nexport default function CmaCalendar() {\r\n  const [events, setEvents] = useState(dummydata);\r\n  const [isLoadingEvents, setIsLoadingEvents] = useState(true);\r\n  const [gymClass, setGymClass] = useState(dummydata);\r\n  const [selectedDate, setSelectedDate] = useState(new Date());\r\n\r\n  const weekdays = [\"S\", \"M\", \"T\", \"W\", \"T\", \"F\", \"S\"];\r\n  const month = dateFns.format(new Date(), \"LLLL\");\r\n\r\n  const getDailyClasses = () => {\r\n    const dailyClasses = events.filter(\r\n      (day) =>\r\n        moment(day.start.dateTime).format(\"MM-DD-YYYY\") ===\r\n        moment(selectedDate).format(\"MM-DD-YYYY\")\r\n    );\r\n    setGymClass(dailyClasses);\r\n  };\r\n\r\n  const currentDateSetter = (day: React.MouseEvent<HTMLButtonElement>) => {\r\n    setSelectedDate(new Date(day.currentTarget.value));\r\n  };\r\n\r\n  useEffect(() => {\r\n    const calEvents: any[] = [];\r\n    fetch(url)\r\n      .then((res) => {\r\n        return res.json();\r\n      })\r\n      .then((res) => {\r\n        setIsLoadingEvents(false);\r\n        res.items.map((item: any) => {\r\n          events.push(item);\r\n        });\r\n        setEvents(calEvents);\r\n        getDailyClasses();\r\n      });\r\n  }, [selectedDate]);\r\n\r\n  function renderDates() {\r\n    // returns month start date of current date\r\n    const monthStart = dateFns.startOfMonth(new Date());\r\n    //returns month end date of current date\r\n    const monthEnd = dateFns.endOfMonth(monthStart);\r\n    //returns week start date of current date ~ a sunday\r\n    const startDate = dateFns.startOfWeek(monthStart);\r\n    //returns week end date of current date ~ a saturday\r\n    const endDate = dateFns.endOfWeek(monthEnd);\r\n    const dateFormat = \"d\";\r\n\r\n    const rows = [];\r\n    let days = [];\r\n    let day = startDate; //first sunday\r\n    let formattedDate = \"\";\r\n    let current: Date;\r\n\r\n    while (day <= endDate) {\r\n      for (let i = 0; i < 7; i++) {\r\n        formattedDate = dateFns.format(day, dateFormat);\r\n        current = day;\r\n        days.push(\r\n          <div className=\"cell\" key={days.length}>\r\n            <button\r\n              className={`cell blk-bg ${\r\n                !dateFns.isSameMonth(day, monthStart)\r\n                  ? \"disabled\"\r\n                  : dateFns.isSameDay(day, selectedDate)\r\n                  ? \"selected\"\r\n                  : \"\"\r\n              }`}\r\n              value={current.toDateString()}\r\n              onClick={(e) => currentDateSetter(e)}\r\n            >\r\n              {formattedDate}\r\n            </button>\r\n          </div>\r\n        );\r\n        day = dateFns.addDays(day, 1);\r\n      }\r\n      rows.push(\r\n        <div className=\"row\" key={rows.length}>\r\n          {days}\r\n        </div>\r\n      );\r\n      days = [];\r\n    }\r\n    return <div className=\"dates\">{rows}</div>;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"calendar-wrapper\">\r\n        <div className=\"cma-calendar-box blk-bg\">\r\n          <div className=\"calendar\">\r\n            <div className=\"month\">\r\n              <h1>{month}</h1>\r\n            </div>\r\n            <div className=\"weekdays\">\r\n              {weekdays.map((day, index) => (\r\n                <div className=\"weekday cell\" key={index}>\r\n                  {day}\r\n                </div>\r\n              ))}\r\n            </div>\r\n            {renderDates()}\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"cma-event-cards\">\r\n          {isLoadingEvents ? (\r\n            <CircularProgress />\r\n          ) : (\r\n            <EventCardList eventList={gymClass} />\r\n          )}\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","C:\\webdev\\cma4\\src\\components\\features\\Calendar\\EventCards\\EventCard.tsx",[],[],"C:\\webdev\\cma4\\src\\components\\features\\Calendar\\EventCards\\EventCardList.tsx",[],[],"C:\\webdev\\cma4\\src\\components\\features\\Carousel\\Carousel.tsx",[],[],"C:\\webdev\\cma4\\src\\components\\features\\Map\\Map.tsx",[],[],"C:\\webdev\\cma4\\src\\components\\Home\\Banner\\Banner.tsx",["124"],[],"C:\\webdev\\cma4\\src\\components\\Home\\Landing\\Desktop\\DesktopHomeLanding.tsx",[],[],"C:\\webdev\\cma4\\src\\components\\Home\\Landing\\HomeLanding.tsx",[],[],"C:\\webdev\\cma4\\src\\components\\Home\\Landing\\Mobile\\MobileHomeLanding.tsx",[],[],"C:\\webdev\\cma4\\src\\components\\navigation\\Footer\\Footer.tsx",[],[],"C:\\webdev\\cma4\\src\\components\\navigation\\Layout\\Layout.tsx",[],[],"C:\\webdev\\cma4\\src\\components\\navigation\\Navbar\\MobileNav\\MobileNav.tsx",[],[],"C:\\webdev\\cma4\\src\\components\\navigation\\Navbar\\NavigationBar.tsx",[],[],"C:\\webdev\\cma4\\src\\components\\features\\MailingList\\MailchimpContainer.tsx",[],[],"C:\\webdev\\cma4\\src\\components\\features\\MailingList\\MailingList.tsx",[],[],{"ruleId":"125","severity":1,"message":"126","line":54,"column":6,"nodeType":"127","endLine":54,"endColumn":20,"suggestions":"128"},{"ruleId":"129","severity":2,"message":"130","line":12,"column":13,"nodeType":"131","messageId":"132"},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'events' and 'getDailyClasses'. Either include them or remove the dependency array.","ArrayExpression",["133"],"react/no-unescaped-entities","`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","JSXText","unescapedEntityAlts",{"desc":"134","fix":"135"},"Update the dependencies array to be: [events, getDailyClasses, selectedDate]",{"range":"136","text":"137"},[1848,1862],"[events, getDailyClasses, selectedDate]"]